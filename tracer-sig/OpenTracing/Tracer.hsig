{-# LANGUAGE FlexibleInstances     #-}
{-# LANGUAGE KindSignatures        #-}
{-# LANGUAGE MultiParamTypeClasses #-}

signature OpenTracing.Tracer where

import Control.Monad.Catch
import Control.Monad.IO.Class      (MonadIO)
import Control.Monad.Reader.Class  (MonadReader)
import Control.Monad.Trans.Class   (MonadTrans)
import Data.HashSet                (HashSet)
import Data.Set                    (Set)
import Data.Text                   (Text)
import OpenTracing.Reporter.Config
import OpenTracing.Types


data Context

instance AsCarrier (TextMap Context) Context
instance AsCarrier (HttpHeaders Context) Context
instance AsCarrier (Binary Context) Context

data Env

data Tracer :: (* -> *) -> * -> *
instance Functor     m => Functor     (Tracer m)
instance Applicative m => Applicative (Tracer m)
instance Monad       m => Monad       (Tracer m)
instance                  MonadTrans  Tracer
instance Monad       m => MonadReader Env (Tracer m)
instance MonadIO     m => MonadIO     (Tracer m)
instance MonadMask   m => MonadMask   (Tracer m)

data PRNG

traceStart
    :: MonadIO m
    => Text
    -> HashSet (Reference Context)
    -> Set Tag
    -> Tracer m (Span Context)

newPRNG :: MonadIO m => m PRNG

newEnv  :: MonadIO m => ConfigSource -> m Env
envPRNG :: Env -> PRNG
envReporterConfig :: Env -> Config

runTracer :: MonadIO m => Env -> Tracer m a -> m a
