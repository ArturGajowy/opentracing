{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-missing-fields #-}
{-# OPTIONS_GHC -fno-warn-missing-signatures #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-----------------------------------------------------------------
-- Autogenerated by Thrift Compiler (0.11.0)                      --
--                                                             --
-- DO NOT EDIT UNLESS YOU ARE SURE YOU KNOW WHAT YOU ARE DOING --
-----------------------------------------------------------------

module ZipkinCore_Consts where
import Prelude (($), (.), (>>=), (==), (++))
import qualified Prelude as P
import qualified Control.Exception as X
import qualified Control.Monad as M ( liftM, ap, when )
import Data.Functor ( (<$>) )
import qualified Data.ByteString.Lazy as LBS
import qualified Data.Hashable as H
import qualified Data.Int as I
import qualified Data.Maybe as M (catMaybes)
import qualified Data.Text.Lazy.Encoding as E ( decodeUtf8, encodeUtf8 )
import qualified Data.Text.Lazy as LT
import qualified GHC.Generics as G (Generic)
import qualified Data.Typeable as TY ( Typeable )
import qualified Data.HashMap.Strict as Map
import qualified Data.HashSet as Set
import qualified Data.Vector as Vector
import qualified Test.QuickCheck.Arbitrary as QC ( Arbitrary(..) )
import qualified Test.QuickCheck as QC ( elements )

import qualified Thrift as T
import qualified Thrift.Types as T
import qualified Thrift.Arbitraries as T


import ZipkinCore_Types
cLIENT_SEND :: LT.Text
cLIENT_SEND = "cs"

cLIENT_RECV :: LT.Text
cLIENT_RECV = "cr"

sERVER_SEND :: LT.Text
sERVER_SEND = "ss"

sERVER_RECV :: LT.Text
sERVER_RECV = "sr"

mESSAGE_SEND :: LT.Text
mESSAGE_SEND = "ms"

mESSAGE_RECV :: LT.Text
mESSAGE_RECV = "mr"

wIRE_SEND :: LT.Text
wIRE_SEND = "ws"

wIRE_RECV :: LT.Text
wIRE_RECV = "wr"

cLIENT_SEND_FRAGMENT :: LT.Text
cLIENT_SEND_FRAGMENT = "csf"

cLIENT_RECV_FRAGMENT :: LT.Text
cLIENT_RECV_FRAGMENT = "crf"

sERVER_SEND_FRAGMENT :: LT.Text
sERVER_SEND_FRAGMENT = "ssf"

sERVER_RECV_FRAGMENT :: LT.Text
sERVER_RECV_FRAGMENT = "srf"

hTTP_HOST :: LT.Text
hTTP_HOST = "http.host"

hTTP_METHOD :: LT.Text
hTTP_METHOD = "http.method"

hTTP_PATH :: LT.Text
hTTP_PATH = "http.path"

hTTP_ROUTE :: LT.Text
hTTP_ROUTE = "http.route"

hTTP_URL :: LT.Text
hTTP_URL = "http.url"

hTTP_STATUS_CODE :: LT.Text
hTTP_STATUS_CODE = "http.status_code"

hTTP_REQUEST_SIZE :: LT.Text
hTTP_REQUEST_SIZE = "http.request.size"

hTTP_RESPONSE_SIZE :: LT.Text
hTTP_RESPONSE_SIZE = "http.response.size"

lOCAL_COMPONENT :: LT.Text
lOCAL_COMPONENT = "lc"

eRROR :: LT.Text
eRROR = "error"

cLIENT_ADDR :: LT.Text
cLIENT_ADDR = "ca"

sERVER_ADDR :: LT.Text
sERVER_ADDR = "sa"

mESSAGE_ADDR :: LT.Text
mESSAGE_ADDR = "ma"

